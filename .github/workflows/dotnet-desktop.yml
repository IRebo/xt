# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Core Desktop

on:
  push:
    branches: [ "main" ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Release]
        targetplatform: [x64]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: xtrance.sln                         # Replace with your solution name, i.e. MyWpfApp.sln.
      #Test_Project_Path: your-test-project-path                 # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.
      Wap_Project_Directory: setup/setup   # Replace with the Wap project directory relative to the solution, i.e. MyWpfApp.Package.
      Wap_Project_Path: setup/setup/setup.wapproj                   # Replace with the path to your Wap project, i.e. MyWpf.App.Package\MyWpfApp.Package.wapproj.

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Use Nerdbank.GitVersioning to set version variables
      uses: dotnet/nbgv@v0.4
      id: nbgv

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
        cache: true

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    - name: Update manifest version
      run: |
        [xml]$manifest = get-content ".\$env:Wap_Project_Directory\Package.appxmanifest"
        $manifest.Package.Identity.Version = "${{ steps.nbgv.outputs.SimpleVersion }}.0"
        $manifest.save(".\$env:Wap_Project_Directory\Package.appxmanifest")

    - name: Update appinstaller version
      run: |
        [xml]$installer = get-content ".\setup\xt.appinstaller"
        $installer.AppInstaller.Version = "${{ steps.nbgv.outputs.SimpleVersion }}.0"
        $installer.AppInstaller.MainPackage.Version = "${{ steps.nbgv.outputs.SimpleVersion }}.0"
        $installer.AppInstaller.MainPackage.Uri = "https://github.com/IRebo/xt/releases/download/${{ steps.nbgv.outputs.SimpleVersion }}.0/xt.msix"
        $installer.save(".\setup\xt.appinstaller")

    # Execute all unit tests in the solution
    #- name: Execute unit tests
    #  run: dotnet test

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration /p:RestoreLockedMode=true
      env:
        Configuration: ${{ matrix.configuration }}

    # Decode the base 64 encoded pfx and save the Signing_Certificate
    - name: Decode the pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
        $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    # Create the app package by building and packaging the Windows Application Packaging project
    - name: Create the app package
      run: msbuild $env:Wap_Project_Path /p:Configuration=$env:Configuration /p:Platform=$env:TargetPlatform /p:AppxLogTelemetryFromSideloadingScript=false /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
      env:
        Appx_Bundle: Never
        Appx_Bundle_Platforms: ${{ matrix.targetplatform }}
        TargetPlatform: ${{ matrix.targetplatform }}
        Appx_Package_Build_Mode: SideloadOnly
        Configuration: ${{ matrix.configuration }}

    # Remove the pfx
    - name: Remove the pfx
      run: Remove-Item -path $env:Wap_Project_Directory\GitHubActionsWorkflow.pfx

    # Upload the MSIX package: https://github.com/marketplace/actions/upload-a-build-artifact
    #- name: Upload build artifacts
    #  uses: actions/upload-artifact@v4
    #  with:
    #    name: MSIX Package ${{ matrix.configuration }} ${{ matrix.targetplatform }} ${{ steps.nbgv.outputs.SimpleVersion }}.0
    #    path: ${{ env.Wap_Project_Directory }}\AppPackages

    #- name: Release
    #  env:
    #    GH_TOKEN: ${{ github.token }}
    #  run: |
    #   rm -ErrorAction ignore xt.msix
    #   rm -ErrorAction ignore xt.zip

    #   cp ${{ env.Wap_Project_Directory }}\AppPackages\*\*.msix xt.msix
    #   Compress-Archive -Path ${{ env.Wap_Project_Directory }}\AppPackages\* -DestinationPath xt.zip
    #   gh release create --latest  ${{ steps.nbgv.outputs.SimpleVersion }}.0 xt.msix xt.zip setup/xt.appinstaller

    - name: Release
      env:
        GH_TOKEN: ${{ github.token }}
      run: |

       
       rm -ErrorAction ignore xt.msix
       rm -ErrorAction ignore xt.zip

       cp ${{ env.Wap_Project_Directory }}\AppPackages\*\*.msix xt.msix
       Compress-Archive -Path ${{ env.Wap_Project_Directory }}\AppPackages\* -DestinationPath xt.zip


       $headers = @{
        "Accept" = "application/vnd.github+json"
        "Authorization" = "Bearer $Env:GH_TOKEN"
       }

       $reposAPIUri = "https://api.github.com/repos/IRebo/xt/releases"
       $reposAPIUriUploads = "https://uploads.github.com/repos/IRebo/xt/releases"
       $releasecommand = @{tag_name="${{ steps.nbgv.outputs.SimpleVersion }}.0";make_latest="true"} | ConvertTo-Json
       $githubRelease = Invoke-RestMethod -Method Post -Uri $reposAPIUri -Headers $headers -body $releasecommand
       $releaseid = $githubRelease.id
       Invoke-RestMethod -Method Post -Uri ${reposAPIUriUploads}/${releaseid}/assets?name=xt.appinstaller -Headers $headers -ContentType "application/appinstaller" -InFile setup/xt.appinstaller
       Invoke-RestMethod -Method Post -Uri ${reposAPIUriUploads}/${releaseid}/assets?name=xt.msix -Headers $headers -ContentType "application/appinstaller" -InFile xt.msix
       Invoke-RestMethod -Method Post -Uri ${reposAPIUriUploads}/${releaseid}/assets?name=xt.zip -Headers $headers -ContentType "application/appinstaller" -InFile xt.zip

